Folder Structure:
TextAnalysis-API/
├── .gitignore
├── LICENSE
├── README.md
├── app/
│   ├── __init__.py
│   ├── api/
│   │   ├── __init__.py
│   │   └── endpoints/
│   │       ├── __init__.py
│   │       └── text_analysis.py
│   ├── core/
│   │   ├── __init__.py
│   │   └── config.py
│   ├── models/
│   │   ├── __init__.py
│   │   └── nlp_model.py
│   └── services/
│       ├── __init__.py
│       └── text_analysis_service.py
├── docs/
│   ├── en/
│   │   └── api_reference.md
│   ├── es/
│   └── fr/
├── main.py
├── requirements.txt
└── tests/
    └── test_api.py

File Index:
1. LICENSE
2. requirements.txt
3. README.md
4. .gitignore
5. main.py
6. app/__init__.py
7. app/core/config.py
8. app/core/__init__.py
9. app/models/nlp_model.py
10. app/models/__init__.py
11. app/api/__init__.py
12. app/api/endpoints/text_analysis.py
13. app/api/endpoints/__init__.py
14. app/services/__init__.py
15. app/services/text_analysis_service.py
16. tests/test_api.py
17. docs/en/api_reference.md


########### 1. LICENSE ###########

MIT License

Copyright (c) 2024 gundurraga

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--- End of 1. LICENSE ---

########### 2. requirements.txt ###########

fastapi==0.112.0
uvicorn==0.30.5
pydantic==2.8.2
transformers==4.43.4
torch==2.4.0
accelerate==0.33.0
--- End of 2. requirements.txt ---

########### 3. README.md ###########

# TextAnalysis API

TextAnalysis API is an open-source project that provides advanced natural language processing capabilities through a simple API. Built with Python, FastAPI, and Hugging Face Transformers, it offers a range of text analysis features for developers and researchers.

## Features

- Language Detection
- Sentiment Analysis
- Offensive Language Detection
- Named Entity Recognition
- Text Summarization (for longer texts)

## Project Structure

```mermaid
graph TD
    A[main.py] --> B[app/]
    B --> C[api/]
    B --> D[core/]
    B --> E[models/]
    B --> F[services/]
    C --> G[endpoints/]
    G --> H[text_analysis.py]
    E --> I[nlp_model.py]
    F --> J[text_analysis_service.py]
```

## Getting Started

1. Clone the repository:

   ```
   git clone https://github.com/gundurraga/TextAnalysis-API.git
   cd TextAnalysis-API
   ```

2. Install dependencies:

   ```
   pip install -r requirements.txt
   ```

3. Run the API:
   ```
   python main.py
   ```

## Usage

Send a POST request to `/analyze` with your text:

```python
import requests

response = requests.post('http://localhost:8000/analyze', json={'text': 'Your text here'})
print(response.json())
```

## Response Format

The API returns a JSON object with the following structure:

```json
{
  "text_length": 123,
  "language": "en",
  "language_confidence": 0.98,
  "sentiment": "POSITIVE",
  "sentiment_confidence": 0.85,
  "is_offensive": false,
  "offensive_confidence": 0.95,
  "entities": {
    "PER": ["John Doe"],
    "ORG": ["Acme Corp"],
    "LOC": ["New York"]
  },
  "summary": "A brief summary of the text (for longer inputs)"
}
```

## Goals

1. Enhance model accuracy and performance
2. Add support for more languages
3. Implement text classification for topics/categories
4. Develop a user-friendly web interface for API testing

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

--- End of 3. README.md ---

########### 4. .gitignore ###########

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

requirements-dev.txt
repo_concatenate.py
TextAnalysis_API.txt
project_manifest.txt

--- End of 4. .gitignore ---

########### 5. main.py ###########

from app.services.text_analysis_service import TextAnalysisService
from pydantic import BaseModel
from fastapi import FastAPI
import sys
from pathlib import Path

# Añade el directorio raíz del proyecto al path de Python
sys.path.append(str(Path(__file__).parent))


app = FastAPI()
text_analysis_service = TextAnalysisService()


class TextRequest(BaseModel):
    text: str


@app.get("/")
async def root():
    return {"message": "Welcome to TextAnalysis API"}


@app.post("/analyze")
async def analyze_text(request: TextRequest):
    return text_analysis_service.analyze_text(request.text)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

--- End of 5. main.py ---

########### 6. app/__init__.py ###########


--- End of 6. app/__init__.py ---

########### 7. app/core/config.py ###########

from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "TextAnalysis API"

    class Config:
        env_file = ".env"


settings = Settings()

--- End of 7. app/core/config.py ---

########### 8. app/core/__init__.py ###########


--- End of 8. app/core/__init__.py ---

########### 9. app/models/nlp_model.py ###########

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import torch


class NLPModel:
    def __init__(self):
        model_name = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)

        self.device = "cuda" if torch.cuda.is_available() else "cpu"

        self.model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
            low_cpu_mem_usage=True
        ).to(self.device)

        self.pipe = pipeline("text-generation", model=self.model,
                             tokenizer=self.tokenizer, device=self.device)

        self.offensive_words = {
            "shit", "motherfucker", "fuck", "bitch", "asshole"}

    def generate_response(self, instruction, input_text="", max_length=100):
        prompt = f"Human: {instruction}\n\nInput: {input_text}\n\nAssistant: Here's the answer:"
        response = self.pipe(prompt, max_length=max_length, do_sample=True,
                             top_p=0.95, top_k=50, truncation=True)[0]['generated_text']
        return response.split("Assistant: Here's the answer:")[-1].strip()

    def detect_language(self, text):
        instruction = "Detect the primary language of the following text. Respond with the language name only. If it's a mix of languages, state the primary language and mention it's mixed."
        response = self.generate_response(instruction, text)
        return response.split(".")[0]  # Take only the first sentence

    def analyze_sentiment(self, text):
        instruction = "Analyze the sentiment of the following text. Respond with ONLY 'positive', 'negative', or 'neutral'."
        response = self.generate_response(instruction, text).lower()
        if 'positive' in response:
            return 'positive'
        elif 'negative' in response:
            return 'negative'
        else:
            return 'neutral'

    def detect_offensive_language(self, text):
        # First, use our simple word list
        if any(word in text.lower() for word in self.offensive_words):
            return True

        # If no offensive words found, use the model for a more nuanced check
        instruction = "Is the following text offensive or inappropriate? Respond with ONLY 'yes' or 'no'."
        response = self.generate_response(instruction, text).lower()
        return 'yes' in response

    def extract_entities(self, text):
        instruction = "Extract named entities (persons, organizations, locations) from the following text. List them in a comma-separated format. If no entities are found, respond with 'No entities found'."
        response = self.generate_response(instruction, text)
        entities = [entity.strip() for entity in response.split(
            ',') if entity.strip() and entity.strip().lower() != 'no entities found']
        return entities if entities else []

    def summarize_text(self, text):
        instruction = "Summarize the following text in one or two sentences."
        return self.generate_response(instruction, text, max_length=150)

--- End of 9. app/models/nlp_model.py ---

########### 10. app/models/__init__.py ###########


--- End of 10. app/models/__init__.py ---

########### 11. app/api/__init__.py ###########


--- End of 11. app/api/__init__.py ---

########### 12. app/api/endpoints/text_analysis.py ###########

from fastapi import APIRouter
from pydantic import BaseModel
from app.services.text_analysis_service import TextAnalysisService

router = APIRouter()
text_analysis_service = TextAnalysisService()


class TextRequest(BaseModel):
    text: str


@router.post("/analyze")
async def analyze_text(request: TextRequest):
    return text_analysis_service.analyze_text(request.text)

--- End of 12. app/api/endpoints/text_analysis.py ---

########### 13. app/api/endpoints/__init__.py ###########


--- End of 13. app/api/endpoints/__init__.py ---

########### 14. app/services/__init__.py ###########


--- End of 14. app/services/__init__.py ---

########### 15. app/services/text_analysis_service.py ###########

from ..models.nlp_model import NLPModel


class TextAnalysisService:
    def __init__(self):
        self.nlp_model = NLPModel()

    def analyze_text(self, text):
        analysis = {
            "text_length": len(text),
            "language": self.nlp_model.detect_language(text),
            "sentiment": self.nlp_model.analyze_sentiment(text),
            "is_offensive": self.nlp_model.detect_offensive_language(text),
            "entities": self.nlp_model.extract_entities(text)
        }

        if len(text.split()) > 100:
            analysis["summary"] = self.nlp_model.summarize_text(text)

        return analysis

--- End of 15. app/services/text_analysis_service.py ---

########### 16. tests/test_api.py ###########

import requests
import json


def test_api(text):
    url = "http://localhost:8000/analyze"
    payload = {"text": text}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, data=json.dumps(payload), headers=headers)
    print(f"Input text: {text}")
    print(json.dumps(response.json(), indent=2))
    print("-" * 50)


def run_tests():
    test_cases = [
        "This is a simple English sentence.",
        "Je suis très heureux aujourd'hui!",
        "This is a longer text that might need summarization. " * 10,
        "Apple Inc. is headquartered in Cupertino, California.",
        "I love this product! It's amazing!",
        "This movie is terrible. I hated every minute of it.",
        "This is a f***ing disaster!"
    ]

    for case in test_cases:
        test_api(case)


if __name__ == "__main__":
    run_tests()

--- End of 16. tests/test_api.py ---

########### 17. docs/en/api_reference.md ###########

# TextAnalysis API Documentation

## Overview

The TextAnalysis API provides text analysis capabilities including language detection and sentiment analysis.

## Endpoints

### POST /analyze

Analyzes the provided text, returning language detection and sentiment analysis results.

#### Request Body

```json
{
  "text": "String to be analyzed"
}
```

#### Response

```json
{
  "text_length": int,
  "language": string,
  "language_confidence": float,
  "sentiment": string,
  "sentiment_confidence": float
}
```

#### Fields

- `text_length`: The number of characters in the input text.
- `language`: The detected language of the text (ISO 639-1 code).
- `language_confidence`: Confidence score for language detection (0-1).
- `sentiment`: The detected sentiment ("POSITIVE", "NEGATIVE", or "NEUTRAL").
- `sentiment_confidence`: Confidence score for sentiment analysis (0-1).

#### Example

Request:

```
POST /analyze
{
  "text": "I love this new sentiment analysis feature!"
}
```

Response:

```json
{
  "text_length": 44,
  "language": "en",
  "language_confidence": 0.9998,
  "sentiment": "POSITIVE",
  "sentiment_confidence": 0.9998
}
```

## Error Handling

The API will return appropriate HTTP status codes for different types of errors:

- 400 Bad Request: Invalid input (e.g., empty text)
- 500 Internal Server Error: Unexpected server-side errors

Each error response will include a message explaining the error.

--- End of 17. docs/en/api_reference.md ---
