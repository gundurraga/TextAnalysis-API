Code Statistics:
1. Total number of files: 10
2. Total lines of code: 362
3. Lines of code per file type:
   - No extension: 21
   - .txt: 6
   - .md: 162
   - .py: 173
4. Number of files per file type:
   - No extension: 1
   - .txt: 1
   - .md: 2
   - .py: 6
5. Average file size: 1055.30 bytes
6. Largest file:
   - Name: nlp_model.py
   - Size: 3136 bytes
   - Lines: 64

Folder Structure:
TextAnalysis-API/
├── LICENSE
├── README.md
├── app/
│   ├── __init__.py
│   ├── api/
│   │   ├── __init__.py
│   │   └── endpoints/
│   │       ├── __init__.py
│   │       └── text_analysis.py
│   ├── core/
│   │   ├── __init__.py
│   │   └── config.py
│   ├── models/
│   │   ├── __init__.py
│   │   └── nlp_model.py
│   └── services/
│       ├── __init__.py
│       └── text_analysis_service.py
├── docs/
│   ├── en/
│   │   └── api_reference.md
│   ├── es/
│   └── fr/
├── main.py
├── requirements.txt
└── tests/
    └── test_api.py

File Index:
1. LICENSE
2. requirements.txt
3. README.md
4. main.py
5. app/core/config.py
6. app/models/nlp_model.py
7. app/api/endpoints/text_analysis.py
8. app/services/text_analysis_service.py
9. tests/test_api.py
10. docs/en/api_reference.md


================================================================================
FILE_0001: LICENSE
================================================================================

MIT License

Copyright (c) 2024 gundurraga

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================================================
END OF FILE_0001: LICENSE
================================================================================


================================================================================
FILE_0002: requirements.txt
================================================================================

fastapi==0.112.0
uvicorn==0.30.5
pydantic==2.8.2
transformers==4.43.4
torch==2.4.0
accelerate==0.33.0
================================================================================
END OF FILE_0002: requirements.txt
================================================================================


================================================================================
FILE_0003: README.md
================================================================================

# TextAnalysis API

TextAnalysis API is an open-source project that provides advanced natural language processing capabilities through a simple API. Built with Python, FastAPI, and Hugging Face Transformers, it offers a range of text analysis features for developers and researchers.

## Features

- Language Detection
- Sentiment Analysis
- Offensive Language Detection
- Named Entity Recognition
- Text Summarization (for longer texts)

## Model

This project uses the TinyLlama/TinyLlama-1.1B-Chat-v1.0 model, a compact yet powerful language model suitable for various NLP tasks.

## Project Structure

```mermaid
graph TD
    A[main.py] --> B[app/]
    B --> C[api/]
    B --> D[core/]
    B --> E[models/]
    B --> F[services/]
    C --> G[endpoints/]
    G --> H[text_analysis.py]
    E --> I[nlp_model.py]
    F --> J[text_analysis_service.py]
```

## Getting Started

1. Clone the repository:

   ```
   git clone https://github.com/gundurraga/TextAnalysis-API.git
   cd TextAnalysis-API
   ```

2. Install dependencies:

   ```
   pip install -r requirements.txt
   ```

3. Run the API:
   ```
   python main.py
   ```

## Usage

Send a POST request to `/analyze` with your text:

```python
import requests

response = requests.post('http://localhost:8000/analyze', json={'text': 'Your text here'})
print(response.json())
```

## Response Format

The API returns a JSON object with the following structure:

```json
{
  "text_length": 123,
  "language": "English",
  "sentiment": "POSITIVE",
  "is_offensive": false,
  "entities": ["John Doe", "Acme Corp", "New York"],
  "summary": "A brief summary of the text (for longer inputs)"
}
```

## Goals

1. Enhance model accuracy and performance
2. Add support for more languages
3. Implement text classification for topics/categories
4. Develop a user-friendly web interface for API testing

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

================================================================================
END OF FILE_0003: README.md
================================================================================


================================================================================
FILE_0004: main.py
================================================================================

from app.services.text_analysis_service import TextAnalysisService
from pydantic import BaseModel
from fastapi import FastAPI
import sys
from pathlib import Path

# Añade el directorio raíz del proyecto al path de Python
sys.path.append(str(Path(__file__).parent))


app = FastAPI()
text_analysis_service = TextAnalysisService()


class TextRequest(BaseModel):
    text: str


@app.get("/")
async def root():
    return {"message": "Welcome to TextAnalysis API"}


@app.post("/analyze")
async def analyze_text(request: TextRequest):
    return text_analysis_service.analyze_text(request.text)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

================================================================================
END OF FILE_0004: main.py
================================================================================


================================================================================
FILE_0005: app/core/config.py
================================================================================

from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "TextAnalysis API"

    class Config:
        env_file = ".env"


settings = Settings()

================================================================================
END OF FILE_0005: app/core/config.py
================================================================================


================================================================================
FILE_0006: app/models/nlp_model.py
================================================================================

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import torch


class NLPModel:
    def __init__(self):
        model_name = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)

        self.device = "cuda" if torch.cuda.is_available() else "cpu"

        self.model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
            low_cpu_mem_usage=True
        ).to(self.device)

        self.pipe = pipeline("text-generation", model=self.model,
                             tokenizer=self.tokenizer, device=self.device)

        self.offensive_words = {
            "shit", "motherfucker", "fuck", "bitch", "asshole"}

    def generate_response(self, instruction, input_text="", max_length=100):
        prompt = f"Human: {instruction}\n\nInput: {input_text}\n\nAssistant: Here's the answer:"
        response = self.pipe(prompt, max_length=max_length, do_sample=True,
                             top_p=0.95, top_k=50, truncation=True)[0]['generated_text']
        return response.split("Assistant: Here's the answer:")[-1].strip()

    def detect_language(self, text):
        instruction = "Detect the primary language of the following text. Respond with the language name only. If it's a mix of languages, state the primary language and mention it's mixed."
        response = self.generate_response(instruction, text)
        return response.split(".")[0]  # Take only the first sentence

    def analyze_sentiment(self, text):
        instruction = "Analyze the sentiment of the following text. Respond with ONLY 'positive', 'negative', or 'neutral'."
        response = self.generate_response(instruction, text).lower()
        if 'positive' in response:
            return 'positive'
        elif 'negative' in response:
            return 'negative'
        else:
            return 'neutral'

    def detect_offensive_language(self, text):
        # First, use our simple word list
        if any(word in text.lower() for word in self.offensive_words):
            return True

        # If no offensive words found, use the model for a more nuanced check
        instruction = "Is the following text offensive or inappropriate? Respond with ONLY 'yes' or 'no'."
        response = self.generate_response(instruction, text).lower()
        return 'yes' in response

    def extract_entities(self, text):
        instruction = "Extract named entities (persons, organizations, locations) from the following text. List them in a comma-separated format. If no entities are found, respond with 'No entities found'."
        response = self.generate_response(instruction, text)
        entities = [entity.strip() for entity in response.split(
            ',') if entity.strip() and entity.strip().lower() != 'no entities found']
        return entities if entities else []

    def summarize_text(self, text):
        instruction = "Summarize the following text in one or two sentences."
        return self.generate_response(instruction, text, max_length=150)

================================================================================
END OF FILE_0006: app/models/nlp_model.py
================================================================================


================================================================================
FILE_0007: app/api/endpoints/text_analysis.py
================================================================================

from fastapi import APIRouter
from pydantic import BaseModel
from app.services.text_analysis_service import TextAnalysisService

router = APIRouter()
text_analysis_service = TextAnalysisService()


class TextRequest(BaseModel):
    text: str


@router.post("/analyze")
async def analyze_text(request: TextRequest):
    return text_analysis_service.analyze_text(request.text)

================================================================================
END OF FILE_0007: app/api/endpoints/text_analysis.py
================================================================================


================================================================================
FILE_0008: app/services/text_analysis_service.py
================================================================================

from ..models.nlp_model import NLPModel


class TextAnalysisService:
    def __init__(self):
        self.nlp_model = NLPModel()

    def analyze_text(self, text):
        analysis = {
            "text_length": len(text),
            "language": self.nlp_model.detect_language(text),
            "sentiment": self.nlp_model.analyze_sentiment(text),
            "is_offensive": self.nlp_model.detect_offensive_language(text),
            "entities": self.nlp_model.extract_entities(text)
        }

        if len(text.split()) > 100:
            analysis["summary"] = self.nlp_model.summarize_text(text)

        return analysis

================================================================================
END OF FILE_0008: app/services/text_analysis_service.py
================================================================================


================================================================================
FILE_0009: tests/test_api.py
================================================================================

import requests
import json


def test_api(text):
    url = "http://localhost:8000/analyze"
    payload = {"text": text}
    headers = {"Content-Type": "application/json"}

    response = requests.post(url, data=json.dumps(payload), headers=headers)
    print(f"Input text: {text}")
    print(json.dumps(response.json(), indent=2))
    print("-" * 50)


def run_tests():
    test_cases = [
        "This is a simple English sentence.",
        "Je suis très heureux aujourd'hui!",
        "This is a longer text that might need summarization. " * 10,
        "Apple Inc. is headquartered in Cupertino, California.",
        "I love this product! It's amazing!",
        "This movie is terrible. I hated every minute of it.",
        "This is a f***ing disaster!"
    ]

    for case in test_cases:
        test_api(case)


if __name__ == "__main__":
    run_tests()

================================================================================
END OF FILE_0009: tests/test_api.py
================================================================================


================================================================================
FILE_0010: docs/en/api_reference.md
================================================================================

# TextAnalysis API Documentation

## Overview

The TextAnalysis API provides text analysis capabilities including language detection and sentiment analysis.

## Endpoints

### POST /analyze

Analyzes the provided text, returning language detection and sentiment analysis results.

#### Request Body

```json
{
  "text": "String to be analyzed"
}
```

#### Response

```json
{
  "text_length": int,
  "language": string,
  "language_confidence": float,
  "sentiment": string,
  "sentiment_confidence": float
}
```

#### Fields

- `text_length`: The number of characters in the input text.
- `language`: The detected language of the text (ISO 639-1 code).
- `language_confidence`: Confidence score for language detection (0-1).
- `sentiment`: The detected sentiment ("POSITIVE", "NEGATIVE", or "NEUTRAL").
- `sentiment_confidence`: Confidence score for sentiment analysis (0-1).

#### Example

Request:

```
POST /analyze
{
  "text": "I love this new sentiment analysis feature!"
}
```

Response:

```json
{
  "text_length": 44,
  "language": "en",
  "language_confidence": 0.9998,
  "sentiment": "POSITIVE",
  "sentiment_confidence": 0.9998
}
```

## Error Handling

The API will return appropriate HTTP status codes for different types of errors:

- 400 Bad Request: Invalid input (e.g., empty text)
- 500 Internal Server Error: Unexpected server-side errors

Each error response will include a message explaining the error.

================================================================================
END OF FILE_0010: docs/en/api_reference.md
================================================================================

